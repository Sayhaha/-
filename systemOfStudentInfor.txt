#include"stdio.h"
#include"stdlib.h"
#include"string.h"
#define HEADER1 "  - - - - - - - - - - - - - - - - STUDENT - - - - - - - - - - - - - - - -\n"
#define HEADER2 " |    学号    |      姓名      | C语言| 数学 | 英语 | 总分 | 平均分| 名次 | \n"
#define HEADER3 " | - - - - - -|- - - - - - - - |-- - -|- - - |- - - |- - --|- - - -|- - - |\n"
#define FORMAT " | %-10s | %-14s | %4d | %4d | %4d | %4d | %.2f | %4d | \n"
#define DATA   p->data.num, p->data.name, p->data.cgrade, p->data.mgrade, p->data.egrade, p->data.total, p->data.ave, p->data.mingci
#define END     "  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"

int saveflag = 0;

typedef struct student
{
    char num[10];
    char name[15];
    int cgrade;
    int mgrade;
    int egrade;
    int total;
    float ave;
    int mingci;
};

typedef struct node
{
    struct student data;
    struct node *next;
}Node, *Link;

void menu()
{
    system("cls");

    printf("                    学生成绩管理系统                  \n\n");
    printf("* * * * * * * * * * * * * * * Menu* * * * * * * * * * * * * * * \n");
    printf("*      1 添加学生记录              2 删除学生记录             * \n");
    printf("*      3 搜索学生记录              4 修改学生记录             * \n");
    printf("*      5 插入学生记录              6 统计学生记录             * \n");
    printf("*      7 排序学生记录              8 存储学生记录             * \n");
    printf("*      9 显示学生记录              0 退出系统                 * \n");
    printf("* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n");
}

void printheader()
{
    printf(HEADER1);
    printf(HEADER2);
    printf(HEADER3);
}

void printdata(Node *pp)
{
    Node *p;
    p=pp;
    printf(FORMAT,DATA);
}

void Wrong()
{
    printf("\n\n\n\n\\n* * * * * Error: 输入有误！！！请按回车键继续* * * * * \n");
    getchar();
}

void Nofind()
{
    printf("\n=====> 未找到相关学生信息！！！ \n");
}

void Disp(Link l)
{
    Node *p;
    p=l->next;
    if(!p)
    {
        printf("\n===== > 未找到相关学生信息！！！ \n");
        getchar();
        return;
    }

    printf("\n\n");
    printheader();

    while(p)
    {
        printdata(p);
        p= p->next;
        printf(HEADER3);
    }
    printf("\n   按回车键进入下一项操作\n");
    getchar();
    getchar();
    printf("\n");
}

Node *Locateofnum(Link l, char findmess[])
{
    Node *r;
    r=l->next;
    while(r)
    {
        if(strcmp(r-> data.num, findmess)==0)
            return r;
        r=r->next;
    }

    return 0;
}

void Locateofname(Link l, char findmess[], Node *n[])
{
    Node *r;
    int i=0;
    r=l->next;
    while(r)
    {
        if(strcmp(r->data.name, findmess)==0)
            n[i++]=r;
        r=r->next;
    }
}

void stringinput(char *t, int lens, char *notice)
{
    char n[255];
    printf(notice);
    scanf("%s",n);
    while(strlen(n)> lens)
    {
        printf("\n 超出规定长度（请输入10位以内）！！！ \n");
        printf(notice);
        scanf("%s",n);
    }
    strcpy(t, n);
}

int numberinput(char *notice)
{
    int t=0;
    printf(notice);
    scanf("%d",&t);
    while(t > 100 || t < 0)
    {
        printf("\n 输入分数范围 [0, 100]! \n");
        printf(notice);
        scanf("%d", &t);
    }
    return t;
}

void Add(Link l)
{
    Node *p, *r, *s;
    char ch, flag=0, num[10];
    r=l;
    s=l->next;
    system("cls");
    Disp(l);
    while(r->next !=NULL)
        r=r->next;
    while(l)
    {
        while(l)
        {
            stringinput(num, 10, "输入学号(按'0'回到主菜单):");
            flag=0;
            if(strcmp(num, "0")==0) return;
            s=l->next;
            while(s)
            {
                if(strcmp(s->data.num,num)==0)
                {
                    flag=1;
                    break;
                }
                s=s->next;
            }
            if(flag==1)
            {
                getchar();
                printf("===== > 该学号 %s 已存在！！！  是否重新输入? (Y/N?):", num);
                scanf("%c",&ch);
                if(ch=='y'||ch=='Y')
                    continue;
                else
                    return;
            }
            else break;
        }
        p=(Node *)malloc(sizeof(Node));
        if(!p)
        {
            printf("\n 申请空间失败！！！ ");
            return;
        }
        strcpy(p->data.num, num);
        stringinput(p->data.name, 15, "Name:");
        p->data.cgrade=numberinput("C语言成绩 [0 ~ 100]:");
        p->data.mgrade=numberinput("数学成绩 [0 ~ 100]:");
        p->data.egrade=numberinput("英语成绩 [0 ~ 100]:");
        p->data.total=p->data.cgrade+p->data.mgrade+p->data.egrade;
        p->data.ave=(float)p->data.total/3.0;
        p->data.mingci=0;
        p->next=NULL;
        r->next=p;
        r=p;
        saveflag=1;
        }
        return;
}

void Qur(Link l)
{
    int select;
    char searchinput[20];
    Node *p;
    Node *n[5]={NULL};
    int i=0;
    if(! l->next)
    {
        system("cls");
        printf("\n===== >  没有学生记录！！！ \n");
        getchar();
        return;
    }

    system("cls");
    printf("\n   ===== > 1 按学号搜索     ===== > 2 按姓名搜索\n");
    printf("     请选择 [1 or 2]:");
    scanf("%d",&select);
    if(select==1)
    {
        stringinput(searchinput,10,"请输入查找学生学号:");
        p=Locateofnum(l, searchinput);
        if(p)
        {
            printheader();
            printdata(p);
            printf(END);
            printf("按回车建继续！！！");
            getchar;
        }
        else
            Nofind();
        getchar();
    }
    else if (select==2)
    {
        stringinput(searchinput, 15, "输入查找学生姓名:");
        Locateofname(l, searchinput, n);
        if((p=n[i++])!=NULL)
        {
            printheader();
            printdata(p);
            printf(END);
        }
        printf("按回车键返回");
        getchar();
        if(n[0]==NULL)  Nofind();
        getchar();
    }
    else Wrong();
    getchar();
}

void Del(Link l)
{
    Node *p, *r;
    char findmess[20], ch;
    if(!l->next)
    {
        system("cls");
        printf("\n===== > 没有学生记录！！！ \n");
        getchar();
        return;
    }
    system("cls");
    Disp(l);
    stringinput(findmess, 10, "输入要删除的学生学号:");
    getchar();
    p=Locateofnum(l, findmess);
    r=l->next;
    while(r){
        if(strcmp(r->data.num,findmess)==0) break;
        if(r)r=r->next;
        if(!r){printf("删除学号不存在！！！");goto loop;}
    }
    printf("你确定删除 %s(y/n)?",findmess);
    scanf("%c",&ch);
    if(ch=='y'||ch=='Y'){
        if(p){
            r=l;
            while(r->next!=p)
                r=r->next;
            r->next=p->next;
            free(p);
            printf("\n===== > 删除成功！！！ \n");
            getchar();
            saveflag=1;
        }
    }
        else if(ch=='n'||ch=='N')  {getchar();printf("删除失败！！！(按回车键返回主菜单)");}
        else Nofind();
        loop: getchar();
}

void Modify(Link l)
{
    Node *p;
    char findmess[20];
    if(!l->next);
    {
        system("cls");
        printf("\n===== > 没有学生记录！！！ \n");
        getchar();
        //return;
    }
    system("cls");
    printf("修改学生记录");
    Disp(l);


    stringinput(findmess, 10, "输入查找学生学号:");
    p=Locateofnum(l, findmess);
    if(p)
    {
        printf("学号:%s,\n",p->data.num);
        printf("姓名:%s,\n",p->data.name);
        stringinput(p->data.name,15, "输入新姓名:");
        printf("C语言成绩 :%d,",p->data.cgrade);
        p->data.cgrade=numberinput("C语言成绩 [0~100]:");
        printf("数学成绩 :%d,",p->data.mgrade);
        p->data.mgrade=numberinput("数学成绩 [0~100]:");
        printf("英语成绩 :%d,",p->data.egrade);
        p->data.egrade=numberinput("英语成绩 [0~100]:");
        p->data.total=p->data.cgrade+p->data.mgrade+p->data.egrade;
        p->data.ave=(float)(p->data.total/3);
        p->data.mingci=0;
        printf("\n===== > 修改成功！！！ \n");
        Disp(l);
        saveflag=1;
    }
    else
        Nofind();
    getchar();
    getchar();
}

void Insert(Link l)
{
    Link p, v, newinfo;
    char ch, num[10], s[10];
    int flag=0;
    v=l->next;
    system("cls");
    Disp(l);
    while(l){
        stringinput(s, 10, "请输入该学号插入位置的前一个学号:");
        flag=0;
        v=l->next;
        while(v){
            if(strcmp(v->data.num, s)==0) {flag=1; break;}
            v=v->next;
        }
        if(flag==1) break;
        else{
            getchar();
            printf("\n====== > 该学号 %s 不存在, 是否再试一次?(y/n):");
            scanf("%c",&ch);
            if(ch=='y'||ch=='Y') continue;
            else return;
        }
    }
    stringinput(num, 10, "输入新的学生学号:");
    v=l->next;
    while(v){
        if(strcmp(v->data.num, num)==0){
            printf("\n===== > 新的学号 %s 已经存在！！！\n",num);
            printheader();
            printdata(v);
            printf("\n");
            getchar();
            getchar();
            return;
        }
        v=v->next;
    }
    newinfo=(Node*)malloc(sizeof(Node));
    if(!newinfo){
        printf("\n 申请内存失败！！！");
        return;
    }
    strcpy(newinfo->data.num, num);
    stringinput(newinfo->data.name, 15, "姓名:");
    newinfo->data.cgrade=numberinput("C语言成绩 [0 ~ 100]:");
    newinfo->data.mgrade=numberinput("数学成绩 [0 ~ 100]:");
    newinfo->data.egrade=numberinput("英语成绩 [0 ~ 100]:");
    newinfo->data.total=newinfo->data.egrade+newinfo->data.mgrade+newinfo->data.cgrade;
    newinfo->data.ave=(float)(newinfo->data.total/3);
    newinfo->data.mingci=0;
    newinfo->next=NULL;
    saveflag=1;
    p=l->next;
    while(l){
        if(strcmp(p->data.num, s)==0){
            newinfo->next=p->next;
            p->next=newinfo;
            break;
        }
        p=p->next;
    }
    Disp(l);
    printf("\n\n");
    getchar();
}

void Count(Link l)
{
    Node *pm, *pe, *pc, *pt;
    Node *r=l->next;
    int countc[5]={0}, countm[5]={0}, counte[5]={0};
    if(!r)
    {
        system("cls");
        printf("\n===== > 没有学生记录！！！");
        getchar();
        return;
    }
    system("cls");
    Disp(l);
    pm=pc=pe=r;
    while(r){
        if(r->data.cgrade<60) countc[0]++;
        if(r->data.mgrade<60) countm[0]++;
        if(r->data.egrade<60) counte[0]++;

        if(r->data.cgrade>=60&&r->data.cgrade<70) countc[1]++;
        if(r->data.mgrade>=60&&r->data.mgrade<70) countm[1]++;
        if(r->data.egrade>=60&&r->data.egrade<70) counte[1]++;

        if(r->data.cgrade>=70&&r->data.cgrade<80) countc[2]++;
        if(r->data.mgrade>=70&&r->data.mgrade<80) countm[2]++;
        if(r->data.egrade>=70&&r->data.egrade<80) counte[2]++;

        if(r->data.cgrade>=80&&r->data.cgrade<90) countc[3]++;
        if(r->data.mgrade>=80&&r->data.mgrade<90) countm[3]++;
        if(r->data.egrade>=80&&r->data.egrade<90) counte[3]++;

        if(r->data.cgrade>=90) countc[4]++;
        if(r->data.mgrade>=90) countm[4]++;
        if(r->data.egrade>=90) counte[4]++;

        if(r->data.cgrade >= pc->data.cgrade) pc=r;
        if(r->data.mgrade >= pm->data.mgrade) pm=r;
        if(r->data.egrade >= pe->data.egrade) pe=r;
        if(r->data.total >= pt->data.total) pt=r;
        r=r->next;
    }
    printf("\n- - - - - - - - - - - - - 统计结果- - - - - - - - - - - - - - - - - - - \n");
    if(countc[0]) printf("C语言成绩  0 ~ 59:%d (人)\n",countc[0]);
    if(countc[1]) printf("C语言成绩 60 ~ 69:%d (人)\n",countc[1]);
    if(countc[2]) printf("C语言成绩 70 ~ 79:%d (人)\n",countc[2]);
    if(countc[3]) printf("C语言成绩 80 ~ 89:%d (人)\n",countc[3]);
    if(countc[4]) printf("C语言成绩 90 ~ 100:%d (人)\n",countc[4]);
    printf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n");
    if(countm[0]) printf("数学成绩   0 ~ 59:%d (人)\n",countm[0]);
    if(countm[1]) printf("数学成绩   60 ~ 69:%d (人)\n",countm[1]);
    if(countm[2]) printf("数学成绩   70 ~ 79:%d (人)\n",countm[2]);
    if(countm[3]) printf("数学成绩   80 ~ 89:%d (人)\n",countm[3]);
    if(countm[4]) printf("数学成绩   90 ~ 100:%d (人)\n",countm[4]);
    printf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n");
    if(counte[0]) printf("英语成绩    0 ~ 59:%d (人)\n",countm[0]);
    if(counte[1]) printf("英语成绩    60 ~ 69:%d (人)\n",countm[1]);
    if(counte[2]) printf("英语成绩    70 ~ 79:%d (人)\n",countm[2]);
    if(counte[3]) printf("英语成绩    80 ~ 89:%d (人)\n",countm[3]);
    if(counte[4]) printf("英语成绩    90 ~ 100:%d (人)\n",countm[4]);
    printf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n");
    printf("总分最高的学生学号: %s  总分为:%d\n",pt->data.num, pt->data.total);
    printf("英语单科分数最高学生学号:%s  分数为:%d\n",pe->data.num, pe->data.egrade);
    printf("数学单科分数最高学生学号:%s  分数为:%d\n",pm->data.num, pm->data.mgrade);
    printf("C语言单科分数最高学生学号:%s  分数为:%d\n",pc->data.num, pc->data.cgrade);
    printf("\n\n按回车键返回");
    getchar();
}

void Sort(Link l)
{
    struct student temp;
    Node *p1, *p2, *p;
    int i=0;
    if(l->next==NULL){
        system("cls");
        printf("\n====== > 没有学生记录！！！ \n");
        getchar();
        return;
    }
    system("cls");
    Disp(l);
    p1=l->next;
    while(p1){
        p2=p1->next;
        p=p1;
        while(p2){
            if(p2->data.total>=p->data.total)
                p=p2;
            p2=p2->next;
        }
        temp=p->data;
        p->data=p1->data;
        p1->data=temp;
        p1=p1->next;
    }
    p=l->next;
    while(p!=NULL){
        i++;
        p->data.mingci=i;
        p=p->next;
    }
    Disp(l);
    saveflag=1;
    printf("\n ====== > 排序完成！！！ \n");
    getchar();
}

void Save(Link l)
{
    FILE *fp;
    Node *p;
    int t=0;
    fp=fopen("E:\\student","wb");
    if(fp==NULL){
        printf("\n====== > 文件打开出错！！！ \n");
        getchar();
        return;
    }
    p=l->next;
    while(p){
        if(fwrite(p,sizeof(Node),1,fp)==1){
            p=p->next;
            t++;
        }
        else break;
    }
    if(t>0){
        getchar();
        printf("\n\n\n\n===== > 文件存储完成, 共存储了 %d 个学生信息\n",t);
        getchar();
        saveflag=0;
    }
    else{
        system("cls");
        printf("目前连接为空, 没有学生信息被存储！！！ \n");
        getchar();
    }
    fclose(fp);
}

int main()
{
   Link l;
   FILE *fp;
   int select;
   char ch;
   int count8=0;
   Node *p, *r;

   l=(Node *)malloc(sizeof(Node));
   if(!l){
    printf("\n 申请空间失败！！！");
    return 0;
   }
   l->next=NULL;
   r=l;
   fp=fopen("E:\\student","ab+");
   if(fp==NULL){
    printf("\n===== > 无法打开文件！！！ \n");
    exit(0);
   }

   while(!feof(fp)){
    p=(Node *)malloc(sizeof(Node));
    if(!p){
        printf("内存分配失败！！！ \n");
        exit(0);
    }

    if(fread(p, sizeof(Node), 1, fp)==1){
        p->next=NULL;
        r->next=p;
        r=p;
        count8++;
    }
   }
   fclose(fp);
   printf("\n===== > 文件打开成功！！！, 共存有学生记录数: %d.\n",count8);
   printf("\n===== > 按回车键进入主菜单！！！");
   getchar();
   while(l){
    system("cls");
    menu();
    p=r;
    printf("\n       请输入你的选择(0 ~ 9):");
    scanf("%d",&select);

    if(select==0){
        if(saveflag==1){
            getchar();
            printf("\n===== > 是否保存修改记录至文件？ (y/n):");
            scanf("%c",&ch);
            if(ch=='y'||ch=='Y') Save(l);
        }
        printf("\n===== > 谢谢使用！！!");
        getchar();
        break;
    }

    switch(select)
    {
        case(1):Add(l);break;
        case(2):Del(l);break;
        case(3):Qur(l);break;
        case(4):Modify(l);break;
        case(5):Insert(l);break;
        case(6):Count(l);break;
        case(7):Sort(l);break;
        case(8):Save(l);break;
        case(9):system("cls");Disp(l);break;
        default:Wrong();getchar();break;
    }
   }
   return 0;
}
